<?php
namespace EMQ\Common;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * List of ErrorCode.
 */
final class ErrorCode {
  /**
   * Invalid action.
   */
  const INVALID_ACTION = 1;
  /**
   * Invalid attributes.
   */
  const INVALID_ATTRIBUTE = 2;
  /**
   * Queue has been deleted recently.
   */
  const QUEUE_DELETED_RECENTLY = 3;
  /**
   * Queue already exists.
   */
  const QUEUE_EXIST = 4;
  /**
   * Queue name is missing.
   */
  const QUEUE_NAME_MISSING = 5;
  /**
   * Queue does not exist.
   */
  const QUEUE_NOT_EXIST = 6;
  /**
   * Queue is used by others.
   */
  const QUEUE_INUSE = 7;
  /**
   * Queue uri is conflict.
   */
  const QUEUE_URI_CONFLICT = 8;
  /**
   * Invalid receipt handle.
   */
  const INVALID_RECEIPT_HANDLE = 9;
  /**
   * Message body is missing.
   */
  const MESSAGE_BODY_MISSING = 10;
  /**
   * Receipt handle not exit.
   */
  const RECEIPT_HANDLE_NOT_EXIST = 11;
  /**
   * Index not unique.
   */
  const INDEX_NOT_UNIQUE = 12;
  /**
   * Permission denied.
   */
  const PERMISSION_DENIED = 13;
  /**
   * Bad request.
   */
  const BAD_REQUEST = 34;
  /**
   * System internal error.
   */
  const INTERNAL_ERROR = 14;
  /**
   * Partition does not exist.
   */
  const PARTITION_NOT_EXIST = 15;
  /**
   * Partition is not running.
   */
  const PARTITION_NOT_RUNNING = 16;
  /**
   * Queue does not exit in cache.
   */
  const QUEUE_NOT_CACHED = 17;
  /**
   * Partition is not serving.
   */
  const PARTITION_NOT_SERVING = 18;
  /**
   * TTransport error, connect server error.
   */
  const TTRANSPORT_ERROR = 19;
  /**
   * Unknown exception.
   */
  const UNKNOWN = 30;
  static public $__names = array(
    1 => 'INVALID_ACTION',
    2 => 'INVALID_ATTRIBUTE',
    3 => 'QUEUE_DELETED_RECENTLY',
    4 => 'QUEUE_EXIST',
    5 => 'QUEUE_NAME_MISSING',
    6 => 'QUEUE_NOT_EXIST',
    7 => 'QUEUE_INUSE',
    8 => 'QUEUE_URI_CONFLICT',
    9 => 'INVALID_RECEIPT_HANDLE',
    10 => 'MESSAGE_BODY_MISSING',
    11 => 'RECEIPT_HANDLE_NOT_EXIST',
    12 => 'INDEX_NOT_UNIQUE',
    13 => 'PERMISSION_DENIED',
    34 => 'BAD_REQUEST',
    14 => 'INTERNAL_ERROR',
    15 => 'PARTITION_NOT_EXIST',
    16 => 'PARTITION_NOT_RUNNING',
    17 => 'QUEUE_NOT_CACHED',
    18 => 'PARTITION_NOT_SERVING',
    19 => 'TTRANSPORT_ERROR',
    30 => 'UNKNOWN',
  );
}

final class RetryType {
  /**
   * Safe retry.
   */
  const SAFE = 0;
  /**
   * Unsafe retry.
   */
  const UNSAFE = 1;
  /**
   * Unsure retry, needs further determines.
   */
  const UNSURE = 2;
  static public $__names = array(
    0 => 'SAFE',
    1 => 'UNSAFE',
    2 => 'UNSURE',
  );
}

/**
 * Copyright 2015, Xiaomi.
 * All rights reserved.
 * Author: shenyuannan@xiaomi.com
 */
class GalaxyEmqServiceException extends TException {
  static $_TSPEC;

  /**
   * @var int
   */
  public $errorCode = null;
  /**
   * @var string
   */
  public $errMsg = null;
  /**
   * @var string
   */
  public $details = null;
  /**
   * @var string
   */
  public $requestId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'errorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'errMsg',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'details',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'requestId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['errorCode'])) {
        $this->errorCode = $vals['errorCode'];
      }
      if (isset($vals['errMsg'])) {
        $this->errMsg = $vals['errMsg'];
      }
      if (isset($vals['details'])) {
        $this->details = $vals['details'];
      }
      if (isset($vals['requestId'])) {
        $this->requestId = $vals['requestId'];
      }
    }
  }

  public function getName() {
    return 'GalaxyEmqServiceException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->errorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->errMsg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->details);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->requestId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('GalaxyEmqServiceException');
    if ($this->errorCode !== null) {
      $xfer += $output->writeFieldBegin('errorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->errorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->errMsg !== null) {
      $xfer += $output->writeFieldBegin('errMsg', TType::STRING, 2);
      $xfer += $output->writeString($this->errMsg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->details !== null) {
      $xfer += $output->writeFieldBegin('details', TType::STRING, 3);
      $xfer += $output->writeString($this->details);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->requestId !== null) {
      $xfer += $output->writeFieldBegin('requestId', TType::STRING, 4);
      $xfer += $output->writeString($this->requestId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Version {
  static $_TSPEC;

  /**
   * The major version number;
   * 
   * 
   * @var int
   */
  public $major = 1;
  /**
   * The minor version number;
   * 
   * 
   * @var int
   */
  public $minor = 0;
  /**
   * The revision number;
   * 
   * 
   * @var int
   */
  public $revision = 0;
  /**
   * The date for release this version;
   * 
   * 
   * @var string
   */
  public $date = "19700101";
  /**
   * The version details;
   * 
   * 
   * @var string
   */
  public $details = "";

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'major',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'minor',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'revision',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'date',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'details',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['major'])) {
        $this->major = $vals['major'];
      }
      if (isset($vals['minor'])) {
        $this->minor = $vals['minor'];
      }
      if (isset($vals['revision'])) {
        $this->revision = $vals['revision'];
      }
      if (isset($vals['date'])) {
        $this->date = $vals['date'];
      }
      if (isset($vals['details'])) {
        $this->details = $vals['details'];
      }
    }
  }

  public function getName() {
    return 'Version';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->major);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->minor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->revision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->details);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Version');
    if ($this->major !== null) {
      $xfer += $output->writeFieldBegin('major', TType::I32, 1);
      $xfer += $output->writeI32($this->major);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minor !== null) {
      $xfer += $output->writeFieldBegin('minor', TType::I32, 2);
      $xfer += $output->writeI32($this->minor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->revision !== null) {
      $xfer += $output->writeFieldBegin('revision', TType::I32, 3);
      $xfer += $output->writeI32($this->revision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->date !== null) {
      $xfer += $output->writeFieldBegin('date', TType::STRING, 4);
      $xfer += $output->writeString($this->date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->details !== null) {
      $xfer += $output->writeFieldBegin('details', TType::STRING, 5);
      $xfer += $output->writeString($this->details);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $ERROR_BACKOFF;
  static protected $ERROR_RETRY_TYPE;
  static protected $MAX_RETRY;

  static protected function init_ERROR_BACKOFF() {
    return     /**
     * SDK auto retry ErrorCode and backOff reference time,
     * Wait time = 2 ^ retry time * backOff reference time
     */
array(
            15 => 1000,
            18 => 1000,
            16 => 1000,
            17 => 1000,
            7 => 1000,
            14 => 1000,
            19 => 1000,
    );
  }

  static protected function init_ERROR_RETRY_TYPE() {
    return     /**
     * Retry types for defined ErrorCode.
     */
array(
            15 =>       0,
            18 =>       0,
            16 =>       0,
            17 =>       0,
            7 =>       0,
            14 =>       1,
            19 =>       2,
);
  }

  static protected function init_MAX_RETRY() {
    return     /**
     * The max retry time before throwing exception.
     */
3;
  }
}


