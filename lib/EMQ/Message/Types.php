<?php
namespace EMQ\Message;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * Copyright 2015, Xiaomi.
 * All rights reserved.
 * Author: shenyuannan@xiaomi.com
 */
class SendMessageRequest {
  static $_TSPEC;

  /**
   * Queue name;
   * 
   * 
   * @var string
   */
  public $queueName = null;
  /**
   * Message body;
   * 
   * 
   * @var string
   */
  public $messageBody = null;
  /**
   * Delay seconds for this message, this will overwrite delaySecond of this
   * queue, default 0s (0s ~ 15min);
   * 
   * 
   * @var int
   */
  public $delaySeconds = null;
  /**
   * Invisibility seconds for this message, this will overwrite
   * invisibilitySeconds of this queue, default 30s (0s ~ 12hour);
   * 
   * 
   * @var int
   */
  public $invisibilitySeconds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageBody',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'delaySeconds',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'invisibilitySeconds',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['messageBody'])) {
        $this->messageBody = $vals['messageBody'];
      }
      if (isset($vals['delaySeconds'])) {
        $this->delaySeconds = $vals['delaySeconds'];
      }
      if (isset($vals['invisibilitySeconds'])) {
        $this->invisibilitySeconds = $vals['invisibilitySeconds'];
      }
    }
  }

  public function getName() {
    return 'SendMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageBody);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->delaySeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->invisibilitySeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageRequest');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageBody !== null) {
      $xfer += $output->writeFieldBegin('messageBody', TType::STRING, 2);
      $xfer += $output->writeString($this->messageBody);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaySeconds !== null) {
      $xfer += $output->writeFieldBegin('delaySeconds', TType::I32, 3);
      $xfer += $output->writeI32($this->delaySeconds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invisibilitySeconds !== null) {
      $xfer += $output->writeFieldBegin('invisibilitySeconds', TType::I32, 4);
      $xfer += $output->writeI32($this->invisibilitySeconds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageResponse {
  static $_TSPEC;

  /**
   * MessageID for the send message, it should in format
   * "partititonID:createTimestamp:sequenceID";
   * 
   * 
   * @var string
   */
  public $messageID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageID'])) {
        $this->messageID = $vals['messageID'];
      }
    }
  }

  public function getName() {
    return 'SendMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageResponse');
    if ($this->messageID !== null) {
      $xfer += $output->writeFieldBegin('messageID', TType::STRING, 1);
      $xfer += $output->writeString($this->messageID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageBatchRequestEntry {
  static $_TSPEC;

  /**
   * The identifier for this partitcular receipt handle;
   * Using to identify the result in response;
   * Need to be unique within one batch
   * 
   * 
   * @var string
   */
  public $entryId = null;
  /**
   * Message body;
   * 
   * 
   * @var string
   */
  public $messageBody = null;
  /**
   * Delay seconds for this message, this will overwrite delaySecond of this
   * queue, default 0s (0s ~ 15min);
   * 
   * 
   * @var int
   */
  public $delaySeconds = null;
  /**
   * Invisibility seconds for this message, this will overwrite
   * invisibilitySeconds of this queue, default 30s (0s ~ 12hour);
   * 
   * 
   * @var int
   */
  public $invisibilitySeconds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'entryId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageBody',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'delaySeconds',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'invisibilitySeconds',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['entryId'])) {
        $this->entryId = $vals['entryId'];
      }
      if (isset($vals['messageBody'])) {
        $this->messageBody = $vals['messageBody'];
      }
      if (isset($vals['delaySeconds'])) {
        $this->delaySeconds = $vals['delaySeconds'];
      }
      if (isset($vals['invisibilitySeconds'])) {
        $this->invisibilitySeconds = $vals['invisibilitySeconds'];
      }
    }
  }

  public function getName() {
    return 'SendMessageBatchRequestEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->entryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageBody);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->delaySeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->invisibilitySeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageBatchRequestEntry');
    if ($this->entryId !== null) {
      $xfer += $output->writeFieldBegin('entryId', TType::STRING, 1);
      $xfer += $output->writeString($this->entryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageBody !== null) {
      $xfer += $output->writeFieldBegin('messageBody', TType::STRING, 2);
      $xfer += $output->writeString($this->messageBody);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->delaySeconds !== null) {
      $xfer += $output->writeFieldBegin('delaySeconds', TType::I32, 3);
      $xfer += $output->writeI32($this->delaySeconds);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invisibilitySeconds !== null) {
      $xfer += $output->writeFieldBegin('invisibilitySeconds', TType::I32, 4);
      $xfer += $output->writeI32($this->invisibilitySeconds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageBatchRequest {
  static $_TSPEC;

  /**
   * Queue name;
   * 
   * 
   * @var string
   */
  public $queueName = null;
  /**
   * List of SendMessageBatchRequestEntry;
   * 
   * 
   * @var \EMQ\Message\SendMessageBatchRequestEntry[]
   */
  public $sendMessageBatchRequestEntryList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'sendMessageBatchRequestEntryList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\SendMessageBatchRequestEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['sendMessageBatchRequestEntryList'])) {
        $this->sendMessageBatchRequestEntryList = $vals['sendMessageBatchRequestEntryList'];
      }
    }
  }

  public function getName() {
    return 'SendMessageBatchRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->sendMessageBatchRequestEntryList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \EMQ\Message\SendMessageBatchRequestEntry();
              $xfer += $elem5->read($input);
              $this->sendMessageBatchRequestEntryList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageBatchRequest');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sendMessageBatchRequestEntryList !== null) {
      if (!is_array($this->sendMessageBatchRequestEntryList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sendMessageBatchRequestEntryList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sendMessageBatchRequestEntryList));
        {
          foreach ($this->sendMessageBatchRequestEntryList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageBatchResponseEntry {
  static $_TSPEC;

  /**
   * corresponding to the entryId in request
   * 
   * 
   * @var string
   */
  public $entryId = null;
  /**
   * MessageID for the send message, it should in format
   * "partititonID:createTimestamp:sequenceID";
   * 
   * 
   * @var string
   */
  public $messageID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'entryId',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'messageID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['entryId'])) {
        $this->entryId = $vals['entryId'];
      }
      if (isset($vals['messageID'])) {
        $this->messageID = $vals['messageID'];
      }
    }
  }

  public function getName() {
    return 'SendMessageBatchResponseEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->entryId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageBatchResponseEntry');
    if ($this->entryId !== null) {
      $xfer += $output->writeFieldBegin('entryId', TType::STRING, 1);
      $xfer += $output->writeString($this->entryId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageID !== null) {
      $xfer += $output->writeFieldBegin('messageID', TType::STRING, 2);
      $xfer += $output->writeString($this->messageID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class MessageBatchErrorEntry {
  static $_TSPEC;

  /**
   * corresponding to the entryId/receiptHandle in request
   * 
   * 
   * @var string
   */
  public $id = null;
  /**
   * The exception indicate why the request entry failed
   * 
   * 
   * @var \EMQ\Common\GalaxyEmqServiceException
   */
  public $reason = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'reason',
          'type' => TType::STRUCT,
          'class' => '\EMQ\Common\GalaxyEmqServiceException',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['reason'])) {
        $this->reason = $vals['reason'];
      }
    }
  }

  public function getName() {
    return 'MessageBatchErrorEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->reason = new \EMQ\Common\GalaxyEmqServiceException();
            $xfer += $this->reason->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MessageBatchErrorEntry');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reason !== null) {
      $xfer += $output->writeFieldBegin('reason', TType::STRUCT, 2);
      $xfer += $this->reason->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SendMessageBatchResponse {
  static $_TSPEC;

  /**
   * The sucessful results list;
   * 
   * 
   * @var \EMQ\Message\SendMessageBatchResponseEntry[]
   */
  public $successful = null;
  /**
   * Failed results list;
   * 
   * 
   * @var \EMQ\Message\MessageBatchErrorEntry[]
   */
  public $failed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'successful',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\SendMessageBatchResponseEntry',
            ),
          ),
        2 => array(
          'var' => 'failed',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\MessageBatchErrorEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['successful'])) {
        $this->successful = $vals['successful'];
      }
      if (isset($vals['failed'])) {
        $this->failed = $vals['failed'];
      }
    }
  }

  public function getName() {
    return 'SendMessageBatchResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->successful = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new \EMQ\Message\SendMessageBatchResponseEntry();
              $xfer += $elem12->read($input);
              $this->successful []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->failed = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \EMQ\Message\MessageBatchErrorEntry();
              $xfer += $elem18->read($input);
              $this->failed []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SendMessageBatchResponse');
    if ($this->successful !== null) {
      if (!is_array($this->successful)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('successful', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->successful));
        {
          foreach ($this->successful as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failed !== null) {
      if (!is_array($this->failed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('failed', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->failed));
        {
          foreach ($this->failed as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReceiveMessageRequest {
  static $_TSPEC;

  /**
   * Queue name;
   * 
   * 
   * @var string
   */
  public $queueName = null;
  /**
   * Max receive message number, default 100 (1 ~ 100);
   * 
   * 
   * @var int
   */
  public $maxReceiveMessageNumber = 100;
  /**
   * Max receive message wait seconds, default 20s (0 ~ 20), 0s means no wait;
   * 
   * 
   * @var int
   */
  public $maxReceiveMessageWaitSeconds = 0;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'maxReceiveMessageNumber',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'maxReceiveMessageWaitSeconds',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['maxReceiveMessageNumber'])) {
        $this->maxReceiveMessageNumber = $vals['maxReceiveMessageNumber'];
      }
      if (isset($vals['maxReceiveMessageWaitSeconds'])) {
        $this->maxReceiveMessageWaitSeconds = $vals['maxReceiveMessageWaitSeconds'];
      }
    }
  }

  public function getName() {
    return 'ReceiveMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxReceiveMessageNumber);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->maxReceiveMessageWaitSeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReceiveMessageRequest');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxReceiveMessageNumber !== null) {
      $xfer += $output->writeFieldBegin('maxReceiveMessageNumber', TType::I32, 2);
      $xfer += $output->writeI32($this->maxReceiveMessageNumber);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxReceiveMessageWaitSeconds !== null) {
      $xfer += $output->writeFieldBegin('maxReceiveMessageWaitSeconds', TType::I32, 3);
      $xfer += $output->writeI32($this->maxReceiveMessageWaitSeconds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ReceiveMessageResponse {
  static $_TSPEC;

  /**
   * MessageID for the received message;
   * 
   * 
   * @var string
   */
  public $messageID = null;
  /**
   * Receipt Handle for the received message
   * Using when change visibility time/delete message
   * 
   * 
   * @var string
   */
  public $receiptHandle = null;
  /**
   * Message body for the received message;
   * 
   * 
   * @var string
   */
  public $messageBody = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'messageID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'receiptHandle',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'messageBody',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['messageID'])) {
        $this->messageID = $vals['messageID'];
      }
      if (isset($vals['receiptHandle'])) {
        $this->receiptHandle = $vals['receiptHandle'];
      }
      if (isset($vals['messageBody'])) {
        $this->messageBody = $vals['messageBody'];
      }
    }
  }

  public function getName() {
    return 'ReceiveMessageResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiptHandle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->messageBody);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ReceiveMessageResponse');
    if ($this->messageID !== null) {
      $xfer += $output->writeFieldBegin('messageID', TType::STRING, 1);
      $xfer += $output->writeString($this->messageID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiptHandle !== null) {
      $xfer += $output->writeFieldBegin('receiptHandle', TType::STRING, 2);
      $xfer += $output->writeString($this->receiptHandle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->messageBody !== null) {
      $xfer += $output->writeFieldBegin('messageBody', TType::STRING, 3);
      $xfer += $output->writeString($this->messageBody);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeMessageVisibilityRequest {
  static $_TSPEC;

  /**
   * Queue name;
   * 
   * 
   * @var string
   */
  public $queueName = null;
  /**
   * receiptHandle for change visibility;
   * 
   * 
   * @var string
   */
  public $receiptHandle = null;
  /**
   * The extra invisibilitySeconds for this message, the invisibility seconds
   * will be (oldIvisibulitySeconds + newInvisibilitySeconds), and can only
   * affect on the newly received message and ont exceed old invisibilitySeconds;
   * 
   * 
   * @var int
   */
  public $invisibilitySeconds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'receiptHandle',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'invisibilitySeconds',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['receiptHandle'])) {
        $this->receiptHandle = $vals['receiptHandle'];
      }
      if (isset($vals['invisibilitySeconds'])) {
        $this->invisibilitySeconds = $vals['invisibilitySeconds'];
      }
    }
  }

  public function getName() {
    return 'ChangeMessageVisibilityRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiptHandle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->invisibilitySeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeMessageVisibilityRequest');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiptHandle !== null) {
      $xfer += $output->writeFieldBegin('receiptHandle', TType::STRING, 2);
      $xfer += $output->writeString($this->receiptHandle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invisibilitySeconds !== null) {
      $xfer += $output->writeFieldBegin('invisibilitySeconds', TType::I32, 3);
      $xfer += $output->writeI32($this->invisibilitySeconds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeMessageVisibilityBatchRequestEntry {
  static $_TSPEC;

  /**
   * receiptHandle for change visibility;
   * 
   * 
   * @var string
   */
  public $receiptHandle = null;
  /**
   * The extra invisibilitySeconds for this message, the invisibility seconds
   * will be (oldIvisibulitySeconds + newInvisibilitySeconds), and can only
   * affect on the newly received message and ont exceed old invisibilitySeconds;
   * 
   * 
   * @var int
   */
  public $invisibilitySeconds = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiptHandle',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'invisibilitySeconds',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiptHandle'])) {
        $this->receiptHandle = $vals['receiptHandle'];
      }
      if (isset($vals['invisibilitySeconds'])) {
        $this->invisibilitySeconds = $vals['invisibilitySeconds'];
      }
    }
  }

  public function getName() {
    return 'ChangeMessageVisibilityBatchRequestEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiptHandle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->invisibilitySeconds);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeMessageVisibilityBatchRequestEntry');
    if ($this->receiptHandle !== null) {
      $xfer += $output->writeFieldBegin('receiptHandle', TType::STRING, 1);
      $xfer += $output->writeString($this->receiptHandle);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->invisibilitySeconds !== null) {
      $xfer += $output->writeFieldBegin('invisibilitySeconds', TType::I32, 2);
      $xfer += $output->writeI32($this->invisibilitySeconds);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeMessageVisibilityBatchRequest {
  static $_TSPEC;

  /**
   * Queue name;
   * 
   * 
   * @var string
   */
  public $queueName = null;
  /**
   * List of ChangeMessageVisibilityRequest;
   * 
   * 
   * @var \EMQ\Message\ChangeMessageVisibilityBatchRequestEntry[]
   */
  public $changeMessageVisibilityRequestEntryList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'changeMessageVisibilityRequestEntryList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\ChangeMessageVisibilityBatchRequestEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['changeMessageVisibilityRequestEntryList'])) {
        $this->changeMessageVisibilityRequestEntryList = $vals['changeMessageVisibilityRequestEntryList'];
      }
    }
  }

  public function getName() {
    return 'ChangeMessageVisibilityBatchRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->changeMessageVisibilityRequestEntryList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \EMQ\Message\ChangeMessageVisibilityBatchRequestEntry();
              $xfer += $elem26->read($input);
              $this->changeMessageVisibilityRequestEntryList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeMessageVisibilityBatchRequest');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->changeMessageVisibilityRequestEntryList !== null) {
      if (!is_array($this->changeMessageVisibilityRequestEntryList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('changeMessageVisibilityRequestEntryList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->changeMessageVisibilityRequestEntryList));
        {
          foreach ($this->changeMessageVisibilityRequestEntryList as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ChangeMessageVisibilityBatchResponse {
  static $_TSPEC;

  /**
   * The sucessful receipt handle;
   * 
   * 
   * @var string[]
   */
  public $successful = null;
  /**
   * Failed results list;
   * Using receipt handle to index
   * 
   * 
   * @var \EMQ\Message\MessageBatchErrorEntry[]
   */
  public $failed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'successful',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'failed',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\MessageBatchErrorEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['successful'])) {
        $this->successful = $vals['successful'];
      }
      if (isset($vals['failed'])) {
        $this->failed = $vals['failed'];
      }
    }
  }

  public function getName() {
    return 'ChangeMessageVisibilityBatchResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->successful = array();
            $_size28 = 0;
            $_etype31 = 0;
            $xfer += $input->readListBegin($_etype31, $_size28);
            for ($_i32 = 0; $_i32 < $_size28; ++$_i32)
            {
              $elem33 = null;
              $xfer += $input->readString($elem33);
              $this->successful []= $elem33;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->failed = array();
            $_size34 = 0;
            $_etype37 = 0;
            $xfer += $input->readListBegin($_etype37, $_size34);
            for ($_i38 = 0; $_i38 < $_size34; ++$_i38)
            {
              $elem39 = null;
              $elem39 = new \EMQ\Message\MessageBatchErrorEntry();
              $xfer += $elem39->read($input);
              $this->failed []= $elem39;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ChangeMessageVisibilityBatchResponse');
    if ($this->successful !== null) {
      if (!is_array($this->successful)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('successful', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->successful));
        {
          foreach ($this->successful as $iter40)
          {
            $xfer += $output->writeString($iter40);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failed !== null) {
      if (!is_array($this->failed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('failed', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->failed));
        {
          foreach ($this->failed as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteMessageRequest {
  static $_TSPEC;

  /**
   * Queue name;
   * 
   * 
   * @var string
   */
  public $queueName = null;
  /**
   * receipt handle of message to delete;
   * 
   * 
   * @var string
   */
  public $receiptHandle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'receiptHandle',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['receiptHandle'])) {
        $this->receiptHandle = $vals['receiptHandle'];
      }
    }
  }

  public function getName() {
    return 'DeleteMessageRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiptHandle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteMessageRequest');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->receiptHandle !== null) {
      $xfer += $output->writeFieldBegin('receiptHandle', TType::STRING, 2);
      $xfer += $output->writeString($this->receiptHandle);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteMessageBatchRequestEntry {
  static $_TSPEC;

  /**
   * receipt handle of message to delete;
   * 
   * 
   * @var string
   */
  public $receiptHandle = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'receiptHandle',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['receiptHandle'])) {
        $this->receiptHandle = $vals['receiptHandle'];
      }
    }
  }

  public function getName() {
    return 'DeleteMessageBatchRequestEntry';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->receiptHandle);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteMessageBatchRequestEntry');
    if ($this->receiptHandle !== null) {
      $xfer += $output->writeFieldBegin('receiptHandle', TType::STRING, 1);
      $xfer += $output->writeString($this->receiptHandle);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteMessageBatchRequest {
  static $_TSPEC;

  /**
   * Queue name;
   * 
   * 
   * @var string
   */
  public $queueName = null;
  /**
   * List of DeleteMessageRequest;
   * 
   * 
   * @var \EMQ\Message\DeleteMessageBatchRequestEntry[]
   */
  public $deleteMessageBatchRequestEntryList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'deleteMessageBatchRequestEntryList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\DeleteMessageBatchRequestEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['deleteMessageBatchRequestEntryList'])) {
        $this->deleteMessageBatchRequestEntryList = $vals['deleteMessageBatchRequestEntryList'];
      }
    }
  }

  public function getName() {
    return 'DeleteMessageBatchRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->deleteMessageBatchRequestEntryList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \EMQ\Message\DeleteMessageBatchRequestEntry();
              $xfer += $elem47->read($input);
              $this->deleteMessageBatchRequestEntryList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteMessageBatchRequest');
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 1);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->deleteMessageBatchRequestEntryList !== null) {
      if (!is_array($this->deleteMessageBatchRequestEntryList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('deleteMessageBatchRequestEntryList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->deleteMessageBatchRequestEntryList));
        {
          foreach ($this->deleteMessageBatchRequestEntryList as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class DeleteMessageBatchResponse {
  static $_TSPEC;

  /**
   * The sucessful receipt handle;
   * 
   * 
   * @var string[]
   */
  public $successful = null;
  /**
   * Failed results list;
   * Using receipt handle to index
   * 
   * 
   * @var \EMQ\Message\MessageBatchErrorEntry[]
   */
  public $failed = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'successful',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'failed',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\EMQ\Message\MessageBatchErrorEntry',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['successful'])) {
        $this->successful = $vals['successful'];
      }
      if (isset($vals['failed'])) {
        $this->failed = $vals['failed'];
      }
    }
  }

  public function getName() {
    return 'DeleteMessageBatchResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->successful = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $xfer += $input->readString($elem54);
              $this->successful []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->failed = array();
            $_size55 = 0;
            $_etype58 = 0;
            $xfer += $input->readListBegin($_etype58, $_size55);
            for ($_i59 = 0; $_i59 < $_size55; ++$_i59)
            {
              $elem60 = null;
              $elem60 = new \EMQ\Message\MessageBatchErrorEntry();
              $xfer += $elem60->read($input);
              $this->failed []= $elem60;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('DeleteMessageBatchResponse');
    if ($this->successful !== null) {
      if (!is_array($this->successful)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('successful', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRING, count($this->successful));
        {
          foreach ($this->successful as $iter61)
          {
            $xfer += $output->writeString($iter61);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->failed !== null) {
      if (!is_array($this->failed)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('failed', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->failed));
        {
          foreach ($this->failed as $iter62)
          {
            $xfer += $iter62->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


