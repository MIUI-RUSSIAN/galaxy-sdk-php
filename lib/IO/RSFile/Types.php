<?php
namespace IO\RSFile;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 压缩算法类型
 */
final class Compression {
  const NONE = 0;
  const SNAPPY = 1;
  static public $__names = array(
    0 => 'NONE',
    1 => 'SNAPPY',
  );
}

/**
 * 数据完整性校验算法类型
 */
final class Checksum {
  const NONE = 0;
  const CRC32 = 1;
  static public $__names = array(
    0 => 'NONE',
    1 => 'CRC32',
  );
}

/**
 * 文件头
 */
class RSFileHeader {
  static $_TSPEC;

  /**
   * Magic常量，固定为"RSF"
   * 
   * @var string
   */
  public $magic = null;
  /**
   * 版本号
   * 
   * @var int
   */
  public $version = null;
  /**
   * 压缩算法类型
   * 可选，进行压缩的区域为文件中除文件头之外其余部分
   * 
   * @var int
   */
  public $compression = null;
  /**
   * 数据完整性校验算法类型
   * 可选，对每条记录对data部分进行校验
   * 
   * @var int
   */
  public $checksum = null;
  /**
   * 记录数目，不含最后EOF记录，可选
   * 
   * @var int
   */
  public $count = -1;
  /**
   * 元信息，内容由使用者自己定义
   * 
   * @var string
   */
  public $metadata = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'magic',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'version',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'compression',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'checksum',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'count',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'metadata',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['magic'])) {
        $this->magic = $vals['magic'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['compression'])) {
        $this->compression = $vals['compression'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['count'])) {
        $this->count = $vals['count'];
      }
      if (isset($vals['metadata'])) {
        $this->metadata = $vals['metadata'];
      }
    }
  }

  public function getName() {
    return 'RSFileHeader';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->magic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->compression);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->count);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->metadata);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RSFileHeader');
    if ($this->magic !== null) {
      $xfer += $output->writeFieldBegin('magic', TType::STRING, 1);
      $xfer += $output->writeString($this->magic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::I32, 2);
      $xfer += $output->writeI32($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->compression !== null) {
      $xfer += $output->writeFieldBegin('compression', TType::I32, 3);
      $xfer += $output->writeI32($this->compression);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::I32, 4);
      $xfer += $output->writeI32($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->count !== null) {
      $xfer += $output->writeFieldBegin('count', TType::I64, 5);
      $xfer += $output->writeI64($this->count);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->metadata !== null) {
      $xfer += $output->writeFieldBegin('metadata', TType::STRING, 6);
      $xfer += $output->writeString($this->metadata);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

/**
 * 记录
 */
class Record {
  static $_TSPEC;

  /**
   * 记录数据部分，仅用于非EOF记录
   * 
   * @var string
   */
  public $data = null;
  /**
   * 数据部分的校验值，可选
   * 
   * @var int
   */
  public $checksum = null;
  /**
   * EOF记录，用于标记文件结束
   * 
   * @var bool
   */
  public $eof = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'data',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'checksum',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'eof',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
      if (isset($vals['checksum'])) {
        $this->checksum = $vals['checksum'];
      }
      if (isset($vals['eof'])) {
        $this->eof = $vals['eof'];
      }
    }
  }

  public function getName() {
    return 'Record';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->data);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->checksum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->eof);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Record');
    if ($this->data !== null) {
      $xfer += $output->writeFieldBegin('data', TType::STRING, 1);
      $xfer += $output->writeString($this->data);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->checksum !== null) {
      $xfer += $output->writeFieldBegin('checksum', TType::I32, 2);
      $xfer += $output->writeI32($this->checksum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->eof !== null) {
      $xfer += $output->writeFieldBegin('eof', TType::BOOL, 3);
      $xfer += $output->writeBool($this->eof);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

final class Constant extends \Thrift\Type\TConstant {
  static protected $MAGIC;

  static protected function init_MAGIC() {
    return "RSF";
  }
}


